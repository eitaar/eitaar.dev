---
import { Icon } from "astro-icon/components";

export interface Props {
  text?: string;
  icon?: string;
  iconOnly?: boolean;
  iconPosition?: "left" | "right";
  variant?: "solid" | "outline" | "soft";
  isLink?: boolean;
  color?: "primary" | "secondary" | "accent";
  href?: string;
  target?: "_blank" | "_self" | "_parent" | "_top";
  disabled?: boolean;
  name?: string;
  onclick?: string;
  size?: "sm" | "md" | "lg";
}

const {
  text,
  icon,
  iconOnly = false,
  iconPosition = "left",
  variant = "solid",
  isLink = false,
  color = "primary",
  href = "#",
  target = "_self",
  disabled = false,
  name,
  onclick,
  size = "md",
} = Astro.props;

const baseClasses =
  "inline-flex items-center justify-center rounded-lg font-semibold shadow-sm transition-all duration-300";

const sizeMap = {
  sm: { iconOnly: "size-8", regular: "px-4 py-1 text-sm" },
  md: { iconOnly: "size-10", regular: "px-6 py-2" },
  lg: { iconOnly: "size-13", regular: "px-6 py-3 text-lg" },
};

const sizeClasses = iconOnly ? sizeMap[size].iconOnly : sizeMap[size].regular;

const colorVariants = {
  solid: {
    primary:
      "bg-primary text-primary-content hover:bg-primary hover:opacity-80",
    secondary:
      "bg-secondary text-secondary-content hover:bg-secondary hover:opacity-80",
    accent: "bg-accent text-accent-content hover:bg-accent hover:opacity-80",
  },
  outline: {
    primary:
      "border-2 border-primary text-primary hover:bg-primary hover:text-primary-content",
    secondary:
      "border-2 border-secondary text-secondary hover:bg-secondary hover:text-secondary-content",
    accent:
      "border-2 border-accent text-accent hover:bg-accent hover:text-accent-content",
  },
  soft: {
    primary: "bg-primary/20 text-primary hover:bg-primary/30",
    secondary: "bg-secondary/20 text-secondary hover:bg-secondary/30",
    accent: "bg-accent/20 text-accent hover:bg-accent/30",
  },
};

const variantClasses = colorVariants[variant][color];

const computed = {
  classList: [baseClasses, sizeClasses, variantClasses],
  buttonClassList: [] as string[],
  rel: target === "_blank" ? "noopener noreferrer" : undefined,
  showLeftIcon: Boolean(icon && iconPosition === "left"),
  showRightIcon: Boolean(icon && iconPosition === "right"),
  iconProps: { width: "60%", height: "50%" },
};

computed.buttonClassList = ["cursor-pointer", ...computed.classList];
---

{
  isLink ? (
    <a
      href={href}
      target={target}
      rel={computed.rel}
      class:list={computed.classList}
    >
      {computed.showLeftIcon && <Icon name={icon} {...computed.iconProps} />}
      {!iconOnly && text}
      {computed.showRightIcon && <Icon name={icon} {...computed.iconProps} />}
    </a>
  ) : (
    <button
      type="button"
      disabled={disabled}
      name={name}
      onclick={onclick}
      class:list={computed.buttonClassList}
    >
      {computed.showLeftIcon && <Icon name={icon} {...computed.iconProps} />}
      {!iconOnly && text}
      {computed.showRightIcon && <Icon name={icon} {...computed.iconProps} />}
    </button>
  )
}
